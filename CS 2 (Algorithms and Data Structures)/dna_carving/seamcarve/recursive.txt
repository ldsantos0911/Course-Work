1. The dynamic programming aspect of this function is the cost table and our
usage of it. We keep track of the minimum cost from the top to get to each point
in the image, then we use this to trace back to the top, starting at the
minimum cost at the bottom. Our structuring of the cost array to record the
minimum costs and allow us to trace back to the top in an efficient manner is an
example of dynamic programming.

2. Similarly to how we did the DNA alignment, we could compute each of the three
possible paths from every point at the top of the saliency map, keeping track of
the lowest-cost path for each option (as we did with the highest score in the
three possible instruction strings). At the end, we would return what we found to
be the lowest-cost path.

3. For an NxN image, the time complexity would be O(N * 3^N) as you would need
to check three paths for each prospective path.

4. 50 * 3^50 is approximately 3.59*10^25. This roughly represents the number of
computations to be performed. If 1 billion are performed per second, this would
take approximately 3.59*10^16 seconds.

5. For an N*N image, the time complexity of the dynamic algorithm is O(N*N). This
is because each cell is visited once in the construction of the cost table. Then,
in constructing the seam, there are roughly 3N operations, give or take a few
for edge cases. The N*N term greatly outweighs this, so there are roughly N*N
operations.

6. So, using dynamic programming, there are approximately 50*50 = 2500 operations.
At 1 billion computations per second, this would take approximately 2.5*10^(-6)
seconds.
